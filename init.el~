;;global setting
(setq package-archives 
      '( 
        ("elpa" . "http://tromey.com/elpa/")
        ("melpa" . "http://melpa.milkbox.net/packages/")
        ("gnu" . "http://elpa.gnu.org/packages/")
        ))
(package-initialize) ;; init elpa packages

(when (getenv "ORG_HOME")
  (let ((org-lisp-dir (expand-file-name "lisp" (getenv "ORG_HOME"))))
    (when (file-directory-p org-lisp-dir)
      (add-to-list 'load-path org-lisp-dir)
      (require 'org))))

;;general config
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(global-linum-mode t)
(setq x-select-enable-clipboard t)
(fset 'yes-or-no-p 'y-or-n-p)
(setq echo-keystrokes 0.1)
(global-font-lock-mode t)
(which-func-mode 1)
(global-hl-line-mode 1)
(setq frame-title-format "%b@emacs")
(show-paren-mode 1)
(electric-pair-mode t)
;; 支持emacs和外部程序的粘贴
(setq x-select-enable-clipboard t)
(setq gc-cons-threshold 100000000) 
(setq indent-tabs-mode t)  ; use spaces only if nil
(add-hook 'prog-mode-hook
          (lambda () (interactive)
            (setq show-trailing-whitespace 1)))
(setq-default tab-width 4)
(global-set-key (kbd "C-c w") 'whitespace-mode)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(debug-on-error t)
 '(display-time-mode t)
 '(ede-project-directories
   (quote
	("e:/project_root/src" "e:/program/c++/algo" "e:/program/c/redis/src")))
 '(package-selected-packages
   (quote
	(projectile ac-c-headers ac-helm company-c-headers slime json-mode helm-projectile paredit helm multi-term auto-complete-clang flycheck ac-clang web-mode ac-html ace-jump-mode js2-mode cmake-mode sr-speedbar helm-gtags java-imports web-beautify thread-dump session org mvn json javascript javap-mode java-snippets guide-key goto-chg ggtags ecb company common-lisp-snippets auto-complete adjust-parens)))
 '(semantic-default-submodes
   (quote
	(global-semantic-decoration-mode global-semantic-idle-completions-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode)))
 '(semantic-idle-scheduler-idle-time 3)
 '(session-use-package t nil (session))
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family #("宋体" 0 2 (charset chinese-gbk)) :foundry "outline" :slant normal :weight normal :height 120 :width normal)))))
(put 'upcase-region 'disabled nil)
(setq default-directory "E:/program/")

;;encoding
(set-language-environment 'Chinese-GB)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;;(set-clipboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
;;(set-selection-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)

;; move window (Shift + cursor)
(windmove-default-keybindings)
(setq windmove-wrap-around t)

;;plugins
;;sbcl
;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
(setq inferior-lisp-program "D:/sbcl/1.3.12/sbcl.exe")
(require 'slime)
(require 'slime-autoloads)
(slime-setup '(slime-fancy))
(global-set-key "\C-cs" 'slime-selector)

;;evil
(require 'evil)
(evil-mode 1)
(define-key evil-insert-state-map (kbd "C-n") 'next-line)
(define-key evil-insert-state-map (kbd "C-p") 'previous-line)
(define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
(define-key evil-insert-state-map (kbd "C-e") 'end-of-line)
(define-key evil-insert-state-map (kbd "C-k") 'kill-line)
(define-key evil-insert-state-map (kbd "C-w") 'kill-region)
(define-key evil-insert-state-map (kbd "C-y") 'yank)
(define-key evil-insert-state-map (kbd "C-d") 'delete-char)

(define-key evil-visual-state-map (kbd "C-n") 'next-line)
(define-key evil-visual-state-map (kbd "C-p") 'previous-line)
(define-key evil-visual-state-map (kbd "C-a") 'beginning-of-line)
(define-key evil-visual-state-map (kbd "C-e") 'end-of-line)
(define-key evil-visual-state-map (kbd "C-k") 'kill-line)
(define-key evil-visual-state-map (kbd "C-w") 'kill-region)
(define-key evil-visual-state-map (kbd "C-y") 'yank)
(define-key evil-visual-state-map (kbd "C-d") 'delete-char)

(define-key evil-normal-state-map (kbd "C-n") 'next-line)
(define-key evil-normal-state-map (kbd "C-p") 'previous-line)
(define-key evil-normal-state-map (kbd "C-a") 'beginning-of-line)
(define-key evil-normal-state-map (kbd "C-e") 'end-of-line)
(define-key evil-normal-state-map (kbd "C-k") 'kill-line)
(define-key evil-normal-state-map (kbd "C-w") 'kill-region)
(define-key evil-normal-state-map (kbd "C-y") 'yank)
(define-key evil-normal-state-map (kbd "M-.") nil)
(define-key evil-normal-state-map (kbd "C-d") 'delete-char)

;;yasnippet
(require 'yasnippet)
(setq yas/prompt-functions 
      '(yas/dropdown-prompt yas/x-prompt yas/completing-prompt yas/ido-prompt yas/no-prompt))
(yas/global-mode 1)
(yas/minor-mode-on)

;;smex
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;;auto-complete
(defun ac-clang-config ()
  (setq ac-clang-flags
	(mapcar(lambda (item)(concat "-I" item))
	       (split-string
		"
..
../include
../inc
../common
../public
.
../..
../../include
../../inc
../../common
../../public
c:/MinGW/include
c:/MinGW/lib/gcc/mingw32/5.3.0/include
c:/MinGW/lib/gcc/mingw32/5.3.0/include/c++
c:/MinGW/lib/gcc/mingw32/5.3.0/include/c++/backward
c:/MinGW/lib/gcc/mingw32/5.3.0/include/c++/mingw32
c:/MinGW/lib/gcc/mingw32/5.3.0/include-fixed
c:/MinGW/mingw32/include
"))))
(ac-config-default)
;;(setq ac-auto-start t)
;;(require 'auto-complete-config)
(require 'auto-complete-clang)
(setq ac-quick-help-delay 0.5)
;; (define-key ac-mode-map  [(control tab)] 'auto-complete)
(define-key ac-mode-map [(meta ?/)] 'auto-complete)
(defun my-ac-config ()
  (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
  (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
  ;;(add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
  ;;(add-hook 'c-mode-common-hook 'ac-clang-config)
  (add-hook 'css-mode-hook 'ac-css-mode-setup)
  (add-hook 'auto-complete-mode-hook 'ac-common-setup)
  (global-auto-complete-mode t))
(my-ac-config)
(defun my-ac-cc-mode-setup ()
  (ac-clang-config)
  (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
(add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
;; ac-source-gtags

(setq auto-mode-alist
      (append '(("\\.org\\'" . org-mode)) auto-mode-alist))

(add-to-list 'ac-modes 'html-mode)
(add-to-list 'ac-modes 'web-mode)

(defcustom ac-modes
  '(emacs-lisp-mode
    lisp-mode
    lisp-interaction-mode
    c-mode cc-mode c++-mode
    java-mode clojure-mode scala-mode
    scheme-mode
    ocaml-mode tuareg-mode
    perl-mode cperl-mode python-mode ruby-mode
    ecmascript-mode javascript-mode js-mode js2-mode php-mode css-mode
    makefile-mode sh-mode fortran-mode f90-mode ada-mode
    xml-mode sgml-mode)
  "Major modes `auto-complete-mode' can run on."
  :type '(repeat symbol)
  :group 'auto-complete)

(global-set-key [(f4)] 'speedbar-get-focus)

;; Package: projejctile
;;(projectile-global-mode)

;; setup GDB
(setq
 ;; use gdb-many-windows by default
 gdb-many-windows t

 ;; Non-nil means display source file containing the main routine at startup
 gdb-show-main t
 )

(defun indent-buffer ()
  "Indent the whole buffer."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))
(global-set-key [f3] 'indent-buffer)

(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-agenda-files (list "D:/org/work.org"
                             "D:/org/school.org" 
                             "D:/org/home.org"))

;;ice jump
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)

;;helm
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
	  
;;helm ggtags
(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 )
(require 'helm-gtags)
;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)

(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)

;;C++
(defun my-c-mode-common-hook ()
  ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
  (c-set-offset 'substatement-open 0)
  ;; other customizations can go here

  (setq c++-tab-always-indent t)
  (setq c-basic-offset 4)                  ;; Default is 2
  (setq c-indent-level 4)                  ;; Default is 2

  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
  (setq tab-width 4)
  (setq indent-tabs-mode t)  ; use spaces only if nil
  )
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;;ggtags
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
